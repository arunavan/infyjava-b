	import java.util.*;  
	abstract class Shape{  
	abstract void draw();  
	}  
	class Rectangle extends Shape{  
	void draw(){System.out.println("drawing rectangle");}  
	}  
	class Circle extends Shape{  
	void draw(){System.out.println("drawing circle");}  
	}  
	class GenericTest{  
	public static void drawShapes(List<? extends Shape> lists){  
	for(Shape s:lists){  
	s.draw();//calling method of Shape class by child class instance  
	}  
	}  
	public static void main(String args[]){  
	List<Rectangle> list1=new ArrayList<Rectangle>();  
	list1.add(new Rectangle());  
	  
	List<Circle> list2=new ArrayList<Circle>();  
	list2.add(new Circle());  
	list2.add(new Circle());  
	  
	drawShapes(list1);  
	drawShapes(list2);  
	}} 


Upperbound:

	import java.util.ArrayList;  
	public class UpperBoundWildcard {  
	    private static Double add(ArrayList<? extends Number> num) {  
	      
	        double sum=0.0;  
	          
	        for(Number n:num)  
	        {  
	            sum = sum+n.doubleValue();  
	        }  
	        return sum;  
	    }  
	    public static void main(String[] args) {  
	        ArrayList<Integer> l1=new ArrayList<Integer>();  
	        l1.add(10);  
	        l1.add(20);  
	        System.out.println("displaying the sum= "+add(l1));  
	          
	        ArrayList<Double> l2=new ArrayList<Double>();  
	        l2.add(30.0);  
	        l2.add(40.0);  
	        System.out.println("displaying the sum= "+add(l2));  
	    }  
	}  
 


Unbounded:

	import java.util.Arrays;  
	import java.util.List;  
	public class UnboundedWildcard {  
	    public static void display(List<?> list)  
	    { for(Object o:list)  
	        { System.out.println(o);  
	        }  
   
	    }  
	    public static void main(String[] args) {  
	    List<Integer> l1=Arrays.asList(1,2,3);  
	    System.out.println("displaying the Integer values");  
	    display(l1);  
	    List<String> l2=Arrays.asList("One","Two","Three");  
	    System.out.println("displaying the String values");  
	    display(l2);  
	    }  
	}  


LowerBoundDemo:

	import java.util.Arrays;  
	import java.util.List;  
	public class LowerBoundWildcard {  
	    public static void addNumbers(List<? super Integer> list) {  
	        for(Object n:list)  
	        {     System.out.println(n);  
	        }  
	    }  
	public static void main(String[] args) {  
	    List<Integer> l1=Arrays.asList(1,2,3);  
	    System.out.println("displaying the Integer values");  
	    addNumbers(l1);  
	    List<Float> l3=Arrays.asList(10f,20f,30f);  
	    System.out.println("displaying the Number values");  
	    addNumbers(l3);  
	    List<Number> l2=Arrays.asList(1.0,2.0,3.0);  
	    System.out.println("displaying the Number values");  
	    addNumbers(l2);  
	}  
	}  
